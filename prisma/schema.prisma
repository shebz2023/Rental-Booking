// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  googleId  String?  @unique
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("RENTER") //renter or host
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  propertiesCreated  Property[] @relation("PropertyCreatedBy")
  bookingsCreated Booking[]   @relation("BookingCreatedBy")

  // Relationships
  properties Property[] 
  bookings   Booking[]  
}

model Property {
  id          String      @id @default(uuid()) @db.Uuid
  title       String
  image       String?
  description String
  pricePerNight Float?
  location    String ?
  hostId      String  @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("PropertyCreatedBy", fields: [createdById], references: [id])
  createdById    String     @db.Uuid

  // Relationships
  host      User      @relation(fields: [hostId], references: [id])
  bookings  Booking[] 
}

model Booking {
  id          String          @id @default(uuid()) @db.Uuid
  checkInDate String
  checkOutDate String
  status      String   @default("PENDING") // "PENDING", "CONFIRMED", or "CANCELED"
  renterId    String @db.Uuid
  propertyId  String  @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("BookingCreatedBy", fields: [createdById], references: [id])
  createdById    String     @db.Uuid

  // Relationships
  renter    User     @relation(fields: [renterId], references: [id])
  property  Property @relation(fields: [propertyId], references: [id])
}